/*#0 MENU https://projecteuler.net/archives
#1 Multiples of 3 and 5
#2 Even Fibonacci numbers
#3 Largest prime factor ******
#4 Largest palindrome product
#5 Smallest multiple
#6 Sum square difference
#7 10001st prime
#8 Largest product in a series
#9 Special Pythagorean triplet
#10 Summation of primes
*/

/* #1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.*/
/*
function sumMultiples(n1) {
    let sum = 0;
    for (let i = 0; i < n1; i++) {
        if (i % 3 == 0 || i % 5 == 0) {
            sum += i;
        }
    }
    return sum;
}
let n1 = 10;
console.log('#1: ' + sumMultiples(n1)) */

/* #2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. */
/*
function EvenFibonacci(n) {
    let m1 = 0;
    let m2 = 1;
    let nextTerm = 0;
    let sum = 0;
    while (nextTerm < n) {
        nextTerm = m1 + m2;
        if (nextTerm % 2 == 0) {
            sum += nextTerm;
        }
        m1 = m2;
        m2 = nextTerm;
    }
    return sum;
}
let n2 = 4000000;
console.log('#2: ' + EvenFibonacci(n2)); */

/* #3
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ? */
function isPrime(x) {
    let n = 0;
    for (i = 2; i <= x; i++) {
        if (x % i == 0) {
            ++n;
        }
    }
    if (n == 1) {
        return true;
    }
    return false;
}
/*
function primeFactor(n3) {
    let a = [];
    for (let i = 2; i <= n3; i++) {
        if (n3 % i == 0) {
            a.push(i);
        }
    }
    let b = [];
    for (let i = 0; i < a.length; i++) {
        if (isPrime(a[i])) {
            b.push(a[i]);
        };
    }
    return b.pop();
}
let n3 = 906609;
console.log('#3: ' + primeFactor(n3)); */

/* #4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers. */
/*
function palindromic() {
    let result = 0;
    let array = [];
    let m = 0;
    for (let i = 100; i <= 999; i++) {
        for (let j = i; j <= 999; j++) {
            result = i * j;
            let t = result.toString();
            let r = '';
            for (let i = t.length - 1; i >= 0; i--) {
                r += t[i];
            }
            if (r == t) {
                array.push(t);
            }
        }
    }
    return Math.max(...array);
}
console.log('#4: ' + palindromic()); */

/*#5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20? */
/*
function smallestMultiple() {
    for (let i = 21; i <= Infinity; i++) {
        let m = 0;
        for (let j = 1; j <= 20; j++) {
            if (i % j == 0){
                m+=1;
                if(m == 20){
                    return i;
                }
            }
        }
    }
}
console.log('#5: ' + smallestMultiple()); */

/*#6
The sum of the squares of the first ten natural numbers is,  1^2 + 2^2 + ... + 10^2 = 385;
The square of the sum of the first ten natural numbers is, ( 1 + 2 + ... + 10 )^2 = 55^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
                3025 - 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.*/
/*
let sumSquare = () => {
    let a = 1;     // first term
    let d = 1;     // difference between two consecutive term
    let l = 100;    // last term
    let n = 100;    // number of term
    let sum = 1 / 6 * ((n) * (n + 1) * ((2 * n) + 1)); // Sum of the squares of first n natural numbers
    let square = Math.pow(((n / 2) * ((2 * a) + ((n - 1) * d))), 2);  // square of sum of arithmatic term
    let difference = square - sum;
    return difference;
}
console.log('#6: ' + sumSquare()); */

/*#7
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10001st prime number? */
/*
let nthPrime = (n) =>{
    let m = 0;
    for(let i = 2; i < Infinity;i++){
        if(isPrime(i)){
            m+=1;
            if(m == n){
                return i;
            }
        }
    }
}
console.log('#7: ' + nthPrime(10001)); */

/*#8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

                            73167176531330624919225119674426574742355349194934
                            96983520312774506326239578318016984801869478851843
                            85861560789112949495459501737958331952853208805511
                            12540698747158523863050715693290963295227443043557
                            66896648950445244523161731856403098711121722383113
                            62229893423380308135336276614282806444486645238749
                            30358907296290491560440772390713810515859307960866
                            70172427121883998797908792274921901699720888093776
                            65727333001053367881220235421809751254540594752243
                            52584907711670556013604839586446706324415722155397
                            53697817977846174064955149290862569321978468622482
                            83972241375657056057490261407972968652414535100474
                            82166370484403199890008895243450658541227588666881
                            16427171479924442928230863465674813919123162824586
                            17866458359124566529476545682848912883142607690042
                            24219022671055626321111109370544217506941658960408
                            07198403850962455444362981230987879927244284909188
                            84580156166097919133875499200524063689912560717606
                            05886116467109405077541002256983155200055935729725
                            71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
What is the value of this product?*/
/*
let thirteenDigitProduct = () => {
    let tNumber = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';
    let substr;
    let p = 0;
    let max = 0;
    let temp = tNumber;
    while (temp.length > 0) {
        let pro = 1;
        substr = tNumber.substr(p, 13);
        for (let i = 0; i < substr.length; i++) {
            pro *= parseInt(substr[i]);
        }
        max = Math.max(pro, max);
        temp = tNumber.slice(p, tNumber.length);
        p++;
    }
    return console.log('#8: ' + max);
}
thirteenDigitProduct();*/
/*#9
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
                            a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc. */
/*
let pythagoreanTriplet = () => {
    for(let c = 3;c<1000;c++){
        for(let b = 2;b<1000;b++){
            for(let a = 1;a<1000;a++){
                if ((Math.pow(c, 2) == Math.pow(b, 2) + Math.pow(a, 2)) && (a + b + c == 1000)){
                    return a*b*c;
                }
            }
        }   
    }
}
console.log('#9: ' + pythagoreanTriplet() ); */
/*#10
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
*/
/*
let sumOfPrime = () =>{
    let total = 0;
    let i = 2;
    while( i < 2000000){
       if(isPrime(i)){
           total+=i;
       }
       i++;
    }
    return total;
}
console.log('#10: ' + sumOfPrime()); */